name: Build

on:
  push:
    branches:
      - 'main'
    paths-ignore:
      - 'docs/**'
      - '*.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '*.md'

env:
  # Indicates the CMake build directory where project files and binaries are being produced.
  CMAKE_BUILD_DIR: ${{ github.workspace }}/build/
  VGFX_SAMPLES: ON

jobs:
  windows:
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Configure Win64
      run: cmake . -G "Visual Studio 17 2022" -A x64 -Bbuild_win_64
    - name: Build Win64
      run: cmake --build build_win_64 --config MinSizeRel

    # UWP
    - name: Configure UWP ARM64
      run: cmake . -G "Visual Studio 17 2022" -A ARM64 -Bbuild_uwp_arm64 -DCMAKE_SYSTEM_NAME:String=WindowsStore -DCMAKE_SYSTEM_VERSION:String="10.0"
    - name: build_uwp_arm64
      run: cmake --build build_uwp_arm64 --config MinSizeRel

    - name: Configure UWP ARM
      run: cmake . -G "Visual Studio 17 2022" -A ARM -Bbuild_uwp_arm -DCMAKE_SYSTEM_NAME:String=WindowsStore -DCMAKE_SYSTEM_VERSION:String="10.0"
    - name: build_uwp_arm
      run: cmake --build build_uwp_arm --config MinSizeRel

    - name: Configure UWP x64
      run: cmake . -G "Visual Studio 17 2022" -A x64 -Bbuild_uwp_x64 -DCMAKE_SYSTEM_NAME:String=WindowsStore -DCMAKE_SYSTEM_VERSION:String="10.0"
    - name: build_uwp_x64
      run: cmake --build build_uwp_x64 --config MinSizeRel

    - name: Package Windows
      run: |
        mkdir bin/win-x64
        mkdir bin/win10-arm64
        mkdir bin/win10-arm
        mkdir bin/win10-x64
        mv build_win_64\lib\MinSizeRel\vortice_image.dll bin/win-x64
        mv build_uwp_arm64\lib\MinSizeRel\vortice_image.dll bin/win10-arm64
        mv build_uwp_arm\lib\MinSizeRel\vortice_image.dll bin/win10-arm
        mv build_uwp_x64\lib\MinSizeRel\vortice_image.dll bin/win10-x64
    - uses: actions/upload-artifact@v2
      with:
        name: vortice_libs_windows
        path: bin

  combine:
    name: combine artifacts
    runs-on: ubuntu-20.04
    needs: [windows]
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: artifacts
      - name: combine
        run: |
          mkdir vortice_libs
          cp -r artifacts/vortice_libs_windows/* vortice_libs
      - name: zip
        run: zip -r vortice_libs.zip vortice_libs
      - uses: AButler/upload-release-assets@v2.0
        if: github.event_name == 'release' && github.event.action == 'created'
        with:
          files: vortice_libs.zip
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v2
        with:
          name: vortice_libs.zip
          path: vortice_libs.zip
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            vortice_libs_windows
